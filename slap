#!/bin/bash

RED="\033[1;31m"
PURPLE="\033[1;35m"
RESET="\033[0m"
NEWLINE="\n"
TAB="\t"

SLAP_BIN="./bin"

PWN_FIRMWARE_CGI="Pwn_Firmware_CGI"
VULN_CLUSTER="Vuln_And_Cluster"
CELERY_VULN_DISCOVERY="Vuln_Discover_Celery"
LOAD_AND_VIEW_RESULTS="Load_And_View_Results"
DISCOVER_AND_DUMP="Discover_And_Dump"
CELERY_VULN_CLUSTER="Vuln_Cluster_Celery"

COMMANDS=(
   "pwn:${PWN_FIRMWARE_CGI}"
   "vuln:${VULN_AND_CLUSTER}"
   "vuln-celery:${CELERY_VULN_CLUSTER}"
   "discover:${DISCOVER_AND_DUMP}"
   "dump:${CELERY_VULN_DISCOVERY}"
   "load:${LOAD_AND_VIEW_RESULTS}"
)

USE_CELERY=false

DOCKER_WORKSPACE="/slap"
DOCKER_IMAGE="docker-firmware-slap"
DOCKER_COMMAND="docker run --rm -it -w ${DOCKER_WORKSPACE}"
COMMAND="python3 ${FIRMWARE_SLAP_PYTHON}"

function print_usage() {
   printf "${NEWLINE}${RED}[!]${RESET} usage: ./slap [[ pwn | vuln (--celery) | discover | dump | load ] FILE ]${NEWLINE}"
   printf "${NEWLINE}${TAB}${PURPLE}image${RESET} opens docker image"
   printf "${NEWLINE}${TAB}${PURPLE}pwn${RESET} pwn firmware cgi script"
   printf "${NEWLINE}${TAB}${PURPLE}vuln${RESET} vuln and cluster"
   printf "${NEWLINE}${TAB}${TAB}(--celery): use celery"
   printf "${NEWLINE}${TAB}${PURPLE}discover${RESET} discover, uses celery"
   printf "${NEWLINE}${TAB}${PURPLE}dump${RESET} discover and dump"
   printf "${NEWLINE}${TAB}${PURPLE}load${RESET} load and view results"
   printf "${NEWLINE}${TAB}${PURPLE}FILE${RESET} file to analyze"
   printf "${NEWLINE}${NEWLINE}"
}

if [[ "$#" -lt 1 ]]; then
   print_usage
   exit 1
fi

if [[ "$1" == "image" ]]; then
   bash -c "${DOCKER_COMMAND} ${DOCKER_IMAGE} /bin/bash"
   exit 0
fi

function get_command() {
   local opt="$1"
   local found=false
   for cmd in "${COMMANDS[@]}"; do
     local key="${cmd%%:*}"
     local value="${cmd#*:}"
     if [[ "$key" == "$opt" ]]; then
        found=true
        local opt_arg="$2"
        if [[ "$key" == "vuln" && "${opt_arg//[$' \t\n\r']/}" == "--celery" ]]; then
           COMMAND="${CELERY_VULN_CLUSTER}"
           USE_CELERY=true
        else
           COMMAND="$value"
        fi
        break
     fi
   done
   if [[ $found == false ]]; then
      print_usage
      exit 1
   fi
   printf "${COMMAND}\n${USE_CELERY}\n"
}

function build_command() {
    echo "${SLAP_BIN}/${COMMAND}.py /mount/${FIRMWARE_FILENAME}"
}

COMMAND_ARGS=($(get_command "$@"))
COMMAND="${COMMAND_ARGS[0]}"
USE_CELERY="${COMMAND_ARGS[1]}"

if [[ $USE_CELERY == true ]]; then
   FIRMWARE_FILE="$3"
else
   FIRMWARE_FILE="$2"
fi

FIRMWARE_FILENAME=$(basename "$FIRMWARE_FILE")
FULL_CMD=$(build_command "$FIRMWARE_FILE")
bash -c "${DOCKER_COMMAND} -v ${FIRMWARE_FILE}:/mount/${FIRMWARE_FILENAME} ${DOCKER_IMAGE} bash -c \"${FULL_CMD}\""
